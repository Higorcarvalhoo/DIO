Objetivo Geral
Modularizar o c√≥digo existente, separando as funcionalidades de saque, dep√≥sito e extrato em fun√ß√µes espec√≠ficas. Al√©m disso, implementar duas novas fun√ß√µes:

Cadastrar usu√°rio (cliente)

Cadastrar conta banc√°ria

üß© Desafio
Precisamos tornar nosso c√≥digo mais organizado e reutiliz√°vel, criando fun√ß√µes bem definidas para as opera√ß√µes existentes:

sacar()

depositar()

exibir_extrato()

Tamb√©m ser√° necess√°rio criar duas novas fun√ß√µes:

‚úÖ Cadastrar Usu√°rio (Cliente)
O programa deve armazenar os usu√°rios em uma lista.
Cada usu√°rio ser√° composto por:

Nome completo

Data de nascimento

CPF (somente os n√∫meros, sem formata√ß√£o)

Endere√ßo (logradouro, n√∫mero - bairro - cidade/estado [sigla])

Importante: N√£o √© permitido cadastrar dois usu√°rios com o mesmo CPF.

‚úÖ Cadastrar Conta Banc√°ria
O programa deve armazenar as contas em uma lista.
Cada conta deve conter:

Ag√™ncia (valor fixo: "0001")

N√∫mero da conta (sequencial, iniciando em 1)

Usu√°rio (associado √† conta)

Observa√ß√£o: Um usu√°rio pode possuir mais de uma conta, mas cada conta pertence a apenas um usu√°rio.

üí∞ Opera√ß√µes Financeiras
‚úÖ Fun√ß√£o sacar()
A fun√ß√£o deve receber os argumentos somente por nome (keyword-only).

Sugest√£o de par√¢metros:

saldo

valor

extrato

limite

numero_saques

limite_saques

Sugest√£o de retorno:

novo_saldo

extrato_atualizado

‚úÖ Fun√ß√£o depositar()
A fun√ß√£o deve receber os argumentos somente por posi√ß√£o (positional-only).

Sugest√£o de par√¢metros:

saldo

valor

extrato

Sugest√£o de retorno:

novo_saldo

extrato_atualizado

‚úÖ Fun√ß√£o exibir_extrato()
A fun√ß√£o deve aceitar argumentos mistos:

Argumentos por posi√ß√£o: saldo

Argumentos por nome: extrato